/*
 * File: app/controller/ItemList.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Feed.controller.ShoppingCarController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.ShoppingCarController',

    config: {
        models: [
            'ShoppingCarModel'
        ],
        stores: [
            'ShoppingCarStore'
        ],
        views: [
            'ShoppingCarList'
        ],

        refs: {
            //postsNav: '#postsNav',
            shoppingCarList: '#ShoppingCarListId'
        },

        control: {
            "shoppingCarList": {
                delEvent: 'onItemsDeleteAction'
            }
        }
    },


    onItemsDeleteAction:function(id){
        Ext.Msg.confirm("确认操作", "确认从购物车移除吗？", function(buttonId,value,opt){
            if(buttonId=="no"){
                return false;
            }

            Ext.Ajax.request({
                url: CfgConst.delCarUrl,
                params: {
                    id:id
                },
                success: function(response){
                    var result = Ext.JSON.decode(response.responseText);
                    if(result && result.success){
                        Ext.Msg.alert("操作成功",result.message);
                        Ext.getStore("ShoppingCarStoreId").loadCarItems();
                        return true;
                    }else{
                        Ext.Msg.alert("操作失败",result.message);
                        return false;
                    }
                }
            });
        });
    },

    //onItemsListActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
    //    this.getApplication().fireEvent('updateNav');
    //},
    //
    //onItemsListItemTap: function(dataview, index, target, record, e, eOpts) {
    //    var story = Ext.create('widget.postsstory',{
    //        title: record.get('title')
    //    });
    //    story.setData(record.data);
    //    this.getPostsNav().push(story);
    //},

    launch: function() {
        this.loadItemsOnFeedLoad();
        Ext.getStore('ShoppingCarStoreId').loadCarItems('http://localhost:8888/d/q/carItemList.json');
    },

    loadItemsOnFeedLoad: function() {
        var self = this;
        Ext.getStore('ShoppingCarStoreId').on('load', function(store, records) {
            //var feed = records[0],
            //    posts, title, feedsStore;
            //
            //if (feed) {
            //    posts = feed.posts().getData().items;
            //    title = feed.get('title');
            //    feedsStore = Ext.getStore('Feeds');
            //
            //    Ext.getStore('Posts').setData(posts);
            //
            //    self.getItemList().title = title;
            //
            //    if (feedsStore.find('url', feed.get('url')) < 0){
            //        feedsStore.add(feed);
            //    }
            //} else {
            //    Ext.Msg.alert('Error', 'Could not load feed. Check that the URL is a valid feed.');
            //}
        });

    },

    init: function(application) {
    }

});
